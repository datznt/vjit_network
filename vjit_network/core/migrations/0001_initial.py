# Generated by Django 3.0 on 2020-11-09 15:50

import autoslug.fields
import ckeditor.fields
from django.conf import settings
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import json.encoder
import phonenumber_field.modelfields
import uuid
import vjit_network.core.manager
import vjit_network.core.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=True, populate_from='username', unique_with=['username'])),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('unknown', 'Unknown')], default='unknown', max_length=7, null=True, verbose_name='Gender')),
                ('is_online', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_company', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', vjit_network.core.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Full name')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone number')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('content', models.TextField(verbose_name='Content')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='Specify file upload time', verbose_name='Create at')),
                ('name', models.CharField(blank=True, default=None, help_text='The name of the file', max_length=255, null=True, verbose_name='File name')),
                ('size', models.BigIntegerField(blank=True, default=0, help_text='File size on hard drive', null=True, verbose_name='File size')),
                ('mimetype', models.CharField(blank=True, help_text='A media type is a standard that indicates the nature and format of a document, file, or assortment of bytes', max_length=100, null=True, verbose_name='Minetype')),
                ('raw', models.FileField(help_text='The original file is uploaded from the client', max_length=500, storage=django.core.files.storage.FileSystemStorage(location='D://mediafiles'), upload_to=vjit_network.core.models.File.raw_directory_path, verbose_name='File raw')),
                ('thumbnails', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=json.encoder.JSONEncoder, null=True, verbose_name='Thumbnails')),
                ('create_by', models.ForeignKey(default=None, help_text='Account to upload this file', on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL, verbose_name='Create by')),
            ],
            options={
                'verbose_name': 'File',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default=None, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=True, populate_from='name', unique_with=['name'])),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('members_count', models.IntegerField(default=0)),
                ('posts_count', models.IntegerField(default=0)),
                ('banner', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.File')),
                ('create_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='admin_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group',
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, help_text='The name of the industry', max_length=255, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('public_code', models.CharField(choices=[('accept', 'Accept'), ('waiting', 'Awaiting approval'), ('dissent', 'Dissent')], default='waiting', max_length=30)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('via_id', models.BigIntegerField(verbose_name='Via id')),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=json.encoder.JSONEncoder, help_text='Field extension of the model', null=True, verbose_name='Extra')),
                ('views_count', models.IntegerField(default=0)),
                ('comments_count', models.IntegerField(default=0)),
                ('create_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='core.Group')),
                ('via_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'core'), ('model', 'student')), models.Q(('app_label', 'core'), ('model', 'company')), models.Q(('app_label', 'core'), ('model', 'user')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Via type')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Tag name')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=140)),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from='name', unique_with=['name'])),
                ('founded', models.IntegerField(blank=True, default=2020, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2020)])),
                ('overview', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('company_type', models.CharField(choices=[('PC', 'Public Company'), ('SE', 'Selft Employed'), ('GA', 'Goverment Agency'), ('NR', 'NonProfit'), ('PH', 'Privately Held'), ('PR', 'Partnership')], default=None, max_length=2)),
                ('slogan', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('email', models.EmailField(default=None, max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(default=None, max_length=128, region=None)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('site_url', models.URLField(blank=True, null=True)),
                ('banner', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_banner', to='core.File')),
                ('industry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Industry')),
                ('logo', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_logo', to='core.File')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='UserSetting',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('language', models.CharField(choices=[('en', 'English'), ('vi', 'Tiếng Việt')], default='vi', max_length=2, verbose_name='Language')),
            ],
            options={
                'verbose_name': 'User setting',
                'verbose_name_plural': 'User settings',
            },
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('code', models.IntegerField(verbose_name='Code OTP')),
                ('expired_time', models.DateTimeField()),
                ('is_enable', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VisitLogger',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('visits_count', models.IntegerField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_logger', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=255, verbose_name='Name')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('create_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skills_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Skill',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('link', models.URLField(max_length=255)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('picture', models.URLField(blank=True, max_length=500, null=True)),
                ('create_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('group', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='group_members', to='core.Group')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='group_members', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Join the group',
                'verbose_name_plural': 'Join the groups',
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='users',
            field=models.ManyToManyField(related_name='join_groups', through='core.GroupUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.BigIntegerField()),
                ('content', models.TextField(help_text='Content of the comment', verbose_name='Content')),
                ('replies_count', models.IntegerField(default=0)),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'core'), ('model', 'post')), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('create_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='Create by')),
                ('parent', models.ForeignKey(blank=True, help_text='If "parent" is "null" then this is "parent" comment.\n        if "parent" is different from "null" then this is a "comment" child of "parent', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='core.Comment', verbose_name='Parent comment')),
            ],
            options={
                'verbose_name': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='BlockUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('block_at', models.DateTimeField(auto_now=True, verbose_name='Block time')),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocker_list', to=settings.AUTH_USER_MODEL, verbose_name='Blocked user')),
                ('create_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_users', to=settings.AUTH_USER_MODEL, verbose_name='Blocker')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttachPost',
            fields=[
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('object_id', models.CharField(default=None, max_length=36, verbose_name='Object id')),
                ('content_type', models.ForeignKey(default=None, limit_choices_to=models.Q(models.Q(('app_label', 'core'), ('model', 'file')), models.Q(('app_label', 'core'), ('model', 'link')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Content type')),
                ('post', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='attaches', to='core.Post', verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Attach post',
                'verbose_name_plural': 'Attaches post',
            },
        ),
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_accept', models.BooleanField(default=True)),
                ('admin_accept', models.BooleanField(default=False)),
                ('user_reason', models.TextField(blank=True, null=True)),
                ('admin_reason', models.TextField(blank=True, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='core.Post')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.File'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('create_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='views', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='views', to='core.Post')),
            ],
            options={
                'verbose_name': 'View',
                'unique_together': {('create_by', 'post')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(blank=True, encoder=json.encoder.JSONEncoder, null=True)),
                ('industries', models.ManyToManyField(blank=True, related_name='student', to='core.Industry', verbose_name='Industries')),
                ('skills', models.ManyToManyField(blank=True, related_name='student', to='core.Skill', verbose_name='Skills')),
            ],
            options={
                'verbose_name': 'Student',
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default=None, max_length=255, verbose_name='Title')),
                ('employment_type', models.CharField(blank=True, choices=[('full_time', 'Full-time'), ('part_time', 'Part-time'), ('contract', 'Contract'), ('temporary', 'Temporary'), ('volunteer', 'Volunteer'), ('internship', 'Internship')], default=None, max_length=10, null=True)),
                ('company_name', models.CharField(default=None, max_length=125, verbose_name='Company')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Location')),
                ('is_currently_working', models.BooleanField(default=False, verbose_name='I am currently working in this role')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End date')),
                ('headline', models.CharField(max_length=255, verbose_name='Headline')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('the_order', models.PositiveIntegerField(default=0)),
                ('company_lookup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Company')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='core.Student')),
            ],
            options={
                'ordering': ['the_order'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('school_name', models.CharField(max_length=255, verbose_name='School')),
                ('degree_name', models.CharField(blank=True, max_length=125, null=True, verbose_name='Degree')),
                ('field_of_study', models.CharField(blank=True, max_length=125, null=True, verbose_name='Field of study')),
                ('start_year', models.SmallIntegerField(blank=True, choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939), (1938, 1938), (1937, 1937), (1936, 1936), (1935, 1935), (1934, 1934), (1933, 1933), (1932, 1932), (1931, 1931), (1930, 1930), (1929, 1929), (1928, 1928), (1927, 1927), (1926, 1926), (1925, 1925), (1924, 1924), (1923, 1923), (1922, 1922), (1921, 1921), (1920, 1920), (1919, 1919), (1918, 1918), (1917, 1917), (1916, 1916), (1915, 1915), (1914, 1914), (1913, 1913), (1912, 1912), (1911, 1911), (1910, 1910), (1909, 1909), (1908, 1908), (1907, 1907), (1906, 1906), (1905, 1905), (1904, 1904), (1903, 1903), (1902, 1902), (1901, 1901), (1900, 1900)], null=True, verbose_name='Start year')),
                ('end_year', models.SmallIntegerField(blank=True, choices=[(2027, 2027), (2026, 2026), (2025, 2025), (2024, 2024), (2023, 2023), (2022, 2022), (2021, 2021), (2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939), (1938, 1938), (1937, 1937), (1936, 1936), (1935, 1935), (1934, 1934), (1933, 1933), (1932, 1932), (1931, 1931), (1930, 1930), (1929, 1929), (1928, 1928), (1927, 1927), (1926, 1926), (1925, 1925), (1924, 1924), (1923, 1923), (1922, 1922), (1921, 1921), (1920, 1920), (1919, 1919), (1918, 1918), (1917, 1917), (1916, 1916), (1915, 1915), (1914, 1914), (1913, 1913), (1912, 1912), (1911, 1911), (1910, 1910), (1909, 1909), (1908, 1908), (1907, 1907), (1906, 1906), (1905, 1905), (1904, 1904), (1903, 1903), (1902, 1902), (1901, 1901), (1900, 1900)], null=True, verbose_name='End year')),
                ('class_id', models.CharField(blank=True, max_length=10, null=True)),
                ('student_code', models.CharField(blank=True, max_length=10, null=True)),
                ('activities', models.TextField(blank=True, null=True, verbose_name='Activities and societies')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='core.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
